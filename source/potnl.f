	PROGRAM POTNL

C	Original Vaxstation version     4-22-89
C	Real*8 used                     12-12-89
C       Corrected REAL*8 errors         8-5-95
C       Modified for Linux              3-02-96
C       Added Grace output table        1-21-10
C       RMP82 form for HPL              3-16-10
C       Fermi contact term in HPL       3-16-10
C       Gombas contact term in HPL      3-25-10 
C       Annotated in H-He use           11-28-19

C	Computes energies and eigenvalues for alkali-noble gas potentials
C
C	Pseudopotential with spherical cutoff
C       Induced dipole outside depends on polarizability
C       Gombas contact term depends on a perturber electron density parameter
C       Fermi contact inside depends on scattering length
C	Core-core interaction model is the same for all states and is not included
C
C       states.dat --
C
C	  asymptotic state energies and quantum numbers
C	  with the format (5(1x,F10.3))
C
C	  ENERGY (CM-1)
C	  N*
C	  L
C	  J
C	  M
C
C	  stored from low to high energy
C
C       param.dat --
C
C         parameters defining the potential
C
C         ALPHA - Polarizability in A^3
C         R0 - Cutoff radius for nobel gas
C         SL - Scatttering length in A (not used in this version)
C         NS - Number of perturber electrons that scatter valence electron
C         JVSELECT - Eigenvector selected for listing
C         NLOW - Lowest state for tabulation
C
C       range.dat --
C
C         range of RG used in output
C
C         RBEGIN - Starting R in A
C         RDEL - Delta R in A
C         NPTS - Number of points to compute
C
C	E stores the energy matrix elements
C	V stores the eigenvectors
C	QN stores the quantum numbers
C
C	After diagonization data are output to file potnl.dat
C         RG (A)
C         ENERGY (CM^-1)
C         largest contributions to eigenvectors and percentages
C
C       Grace file pseudo.agr contains 8 states from NLOW to NHIGH
C         Grace NXY column format RG (A) and ENERGY (CM^-1)

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23
	DIMENSION E(100,100),V(100,100),QN(100,5)
	DIMENSION ARRAY(100),INRGY(100),IVCTR(100)
	DIMENSION THETA(100,100)
        DIMENSION EPSEUDO(100)
	ERYD=109737.312D0
	A0=0.52917715D0
     	OPEN (UNIT=20,FILE='states.dat',STATUS='OLD')
	I=0
 50	CONTINUE
	I=I+1
	READ(20,*, END=100) (QN(I,J),J=1,5)
	GO TO 50
 100	CONTINUE
	CLOSE (UNIT=20)
	NLVLS=I-1

C	READ IN PARAMETERS FOR CALCULATION
C       DISTANCES IN ANGSTROMS ARE CONVERTED TO ATOMIC UNITS 

	OPEN (UNIT=20,FILE='param.dat',STATUS='OLD')
	READ(20,*) ALPHA
	ALPHA=ALPHA/(A0**3)
	READ(20,*) R0
	R0=R0/A0
C	READ(20,*) SL
C	SL=SL/A0
        READ(20,*) ANS
        ANS23=ANS**(2.D0/3.D0)       
        READ(20,*) JVSELECT
        READ(20,*) NLOW
        NHIGH=NLOW+9
        IF (NHIGH.GT.NLVLS) NHIGH=NLVLS
	CLOSE(UNIT=20)

C	READ IN DATA ON RANGE OF RG VALUES 

	OPEN (UNIT=20,FILE='range.dat',STATUS='OLD')
	READ(20,*) RBEGIN
	READ(20,*) RDEL
	READ(20,*) NPTS
	CLOSE (UNIT=20)

C	START CALCULATIONS

	OPEN(UNIT=20,FILE='pseudo.dat',STATUS='NEW')
	OPEN(UNIT=21,FILE='select.dat',STATUS='NEW')
        OPEN(UNIT=22,FILE='pseudo.agr',STATUS='NEW')
	RBEGIN=RBEGIN/A0
	RDEL=RDEL/A0
	RG=RBEGIN-RDEL
	DO 800 I=1,NPTS
	RG=RG+RDEL
        
C       CONVERT TO ANGSTROMS FOR OUTPUT
        
	R=RG*A0
	WRITE(20,1006)
 1006	FORMAT(' ***') 
	WRITE(20,1008)
 1008	FORMAT(' ')
	WRITE(20,1010) R
 1010	FORMAT(' R = ',F7.3)
	WRITE(20,1008)

C	Evaluate perturbation matrix

	DO 500 J=1,NLVLS
	DO 500 K=J,NLVLS

C	IDENTIFY QUANTUM NUMBERS OF LEVELS J AND K

	AN=QN(J,2)
	AL=QN(J,3)
	AJ=QN(J,4)
	AMJ=QN(J,5)
	ANP=QN(K,2)
	ALP=QN(K,3)
	AJP=QN(K,4)
	AMJP=QN(K,5)
	E(J,K)=EMAT(AN,AL,AJ,AMJ,ANP,ALP,AJP,AMJP)

C       CONVERT EIGENVALUES TO CM^-1

	E(J,K)=2.D0*ERYD*E(J,K)

C	Fold the matrix on the diagonal

	E(K,J)=E(J,K)
 500	CONTINUE

C	Add asymptotic atomic energies along the diagonal

	DO 510 IC=1,NLVLS
	E(IC,IC)=E(IC,IC)+QN(IC,1)
 510	CONTINUE

C	DIAGONALIZE ENERGY MATRIX

	EPS=1.D-2
	CALL JACOB(NLVLS,EPS,E,V)

C	OUTPUT DATA TO POTNL.DAT FILE
C	EQUATE DIAGONAL ENERGIES TO ARRAY FOR SORT

	DO 600 J=1,NLVLS
	ARRAY(J)=E(J,J)
 600	CONTINUE

C	SORT LEVELS FROM LOW TO HIGH AND STORE NUMBERS IN INRGY

	CALL SORT(NLVLS,ARRAY,INRGY)
	DO 700 J=1,NLVLS
	JE=INRGY(J)
	ENERGY=E(JE,JE)
        EPSEUDO(J)=ENERGY

C	SORT CONTRIBUTIONS TO EIGENVECTOR FOR THIS LEVEL

	DO 650 K=1,NLVLS
	ARRAY(K)=(V(K,JE))**2
 650	CONTINUE
	CALL SORT(NLVLS,ARRAY,IVCTR)
	NL1=NLVLS-1
	JV1=IVCTR(NLVLS)
	JV2=IVCTR(NL1)

C	JV1 AND JV2 ARE THE MOST SIGNIFICANT EIGENVECTORS

	PRCNT1=V(JV1,JE)
	PRCNT1=PRCNT1**2
	PRCNT2=V(JV2,JE)
	PRCNT2=PRCNT2**2
	WRITE(20,2000) ENERGY,JV1,PRCNT1,JV2,PRCNT2
 2000	FORMAT(1X,F10.3,2X,I3,2X,F6.4,2X,I3,2X,F6.4)
        IF(JVSELECT.EQ.JV1) THEN
          WRITE(21,*) R,ENERGY,PRCNT1
        END IF
 700	CONTINUE
	WRITE(20,2020)
	WRITE(20,2020)
 2020	FORMAT(' ')
        WRITE(22,2030) R, (EPSEUDO(K), K=NLOW,NHIGH)
 2030   FORMAT(1X,F10.3,10(2X,F10.3))
 800	CONTINUE
	CLOSE(UNIT=20)
	CLOSE(UNIT=21)
        CLOSE(UNIT=22)
	END


	SUBROUTINE SORT(N,A,I)

C	SORTS THE LIST A INTO ASCENDING VALUES
C	BY STORING THE INDEX OF THE ITEM IN THE LIST I
C
C	INITIALIZE THE LIST AT ZERO

        IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION A(100),I(100)

	DO 100 J=1,N
	I(J)=0
 100	CONTINUE

C	FIND THE SMALLEST ITEM REMAINING IN THE LIST AND
C	PLACE ITS INDEX IN I

	DO 200 J=1,N
	AMIN=200000.
	DO 190 K=1,N
	IF(A(K).GT.AMIN) GO TO 190

C	CHECK TO SEE IF THIS VALUE HAS BEEN LISTED

	DO 150 KP=1,J
	IF(K.EQ.I(KP)) GO TO 190
 150	CONTINUE
	AMIN=A(K)
	IMIN=K
 190	CONTINUE
	I(J)=IMIN
 200	CONTINUE
	RETURN
	END


	SUBROUTINE JACOB(N,EPS,A,B)

C	COMPUTES EIGENVALUES OF MATRIX A BY 
C	CYCLIC JACOBI METHODS . . .
C	REQUIRES SUBROUTINE ROTATN
C
C	FROM "NUMERICAL ANALYSIS OF SYMMETRIC MATRICES"
C	BY H. R. SCHWARZ
C	QA 263 .S3313
C
C	ADAPTED TO DEC-10 BY J. KIELKOPF
C	TO INCLUDE EIGENVECTORS
C	FEBRUARY 14, 1980
C
C	N IS DIMENSION OF MATRIX
C	EPS IS TOLERANCE IN ABSOLUTE VALUE OF EIGENVALUES
C	A IS THE NXN ARRAY TO BE DIAGONALIZED
C	A IS RETURNED AS THE DIAGONAL ARRAY
C	B IS THE NXN ARRAY OF EIGENVECTORS
C	COLUMNS OF B ARE EIGENVECTORS CORRESPONDING TO
C	DIAGONAL ELEMENTS OF A

        IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION A(100,100),B(100,100)

C	Trap arithmetic overflows with ATOL

	ATOL=1.E-10

	DO 5 I=1,N
	DO 5 J=1,N
	B(I,J)=0.D0
	IF(I.EQ.J) B(I,J)=1.D0
 5	CONTINUE
	NLSS1=N-1

C	ESTABLISH SS
C	SS IS THE CRITERION OF SIZE OF OFF-DIAGONAL ELEMENTS

 10	SS=0.D0
	DO 20 I=1,NLSS1
	IPLS1=I+1
	DO 20 J=IPLS1,N
	SS=SS+A(I,J)**2
 20	CONTINUE

C	TEST WHETHER SS SUFFICIENTLY SMALL

	IF(2.D0*SS-EPS**2) 100,30,30

C	NO, IT IS NOT.  KEEP COMPUTING

 30	DO 80 IP=1,NLSS1
	IPPLS1=IP+1
	DO 80 IQ=IPPLS1,N

C	Trap overflows in THETA

C	IF(A(IP,IQ)) 40,80,40
	ATEST=DABS(A(IP,IQ))
	IF(ATEST.LT.ATOL) GO TO 80      

C	APPLY IP-IQ ROTATION

 40	THETA=0.5D0*(A(IQ,IQ)-A(IP,IP))/A(IP,IQ)
	IF(THETA) 60,50,60
 50	T=1.
	GO TO 70
 60	T=1.D0/(THETA+DSIGN(1.D0,THETA)*DSQRT(1.D0+THETA**2))
 70	C=1.D0/DSQRT(1.D0+T*T)
	S=C*T
	KP=IP
	KQ=IQ
	CALL ROTATN(N,C,S,KP,KQ,A)
	CALL VECTOR(N,C,S,KP,KQ,B)
 80	CONTINUE
	GO TO 10
 100	CONTINUE

C	MATRIX IS NOW DIAGONALIZED
C	SET ELEMENTS OFF THE DIAGONAL TO ZERO

	DO 120 I=1,N
	DO 120 J=1,N
	IF(I.NE.J) A(I,J)=0.D0
 120	CONTINUE
	RETURN
	END


	SUBROUTINE ROTATN(N,C,S,IP,IQ,A)

C	THIS SUBROUTINE APPLIES JACOBI ROTATIONS TO THE MATRIX A
C	FINAL RESULTS ARE STORED IN MATRIX A AND RETURNED
C	ROTATION SIN (S) AND COS (C) ARE REQUIRED

        IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION A(100,100)

	H=C*C*A(IP,IP)-2.D0*C*S*A(IP,IQ)+S*S*A(IQ,IQ)
	G=S*S*A(IP,IP)+2.D0*C*S*A(IP,IQ)+C*C*A(IQ,IQ)
	A(IP,IQ)=C*S*(A(IP,IP)-A(IQ,IQ))+(C*C-S*S)*A(IP,IQ)
	A(IP,IP)=H
	A(IQ,IQ)=G
	IF(IP-1) 15,15,5
 5	IPLSS1=IP-1
	DO 10 J=1,IPLSS1
	H=C*A(J,IP)-S*A(J,IQ)
	A(J,IQ)=S*A(J,IP)+C*A(J,IQ)
	A(J,IP)=H
 10	CONTINUE
 15	IF(IQ-IP-1) 40,25,16
 16	IPPLS1=IP+1
	IQLSS1=IQ-1
	DO 20 J=IPPLS1,IQLSS1
	H=C*A(IP,J)-S*A(J,IQ)
	A(J,IQ)=S*A(IP,J)+C*A(J,IQ)
	A(IP,J)=H
 20	CONTINUE
 25	IF(N-IQ) 40,40,26
 26	IQPLS1=IQ+1
	DO 30 J=IQPLS1,N
	H=C*A(IP,J)-S*A(IQ,J)
	A(IQ,J)=S*A(IP,J)+C*A(IQ,J)
	A(IP,J)=H
 30	CONTINUE
 40	RETURN
	END

	SUBROUTINE VECTOR(N,C,S,IP,IQ,B)

C	THIS SUBROUTINE MODIFIES THE EIGENVECTOR ARRAY
C	FOR EACH ROTATION ABOUT IP,IQ
C
C	MODIFY COLUMNS IP AND IQ SIMULTANEOUSLY

        IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION B(100,100)

	DO 100 I=1,N
	H=B(I,IP)
	G=B(I,IQ)
	B(I,IP)=H*C-G*S
	B(I,IQ)=H*S+G*C
 100	CONTINUE
	RETURN
	END


	DOUBLE PRECISION FUNCTION EMAT(AN,AL,AJ,AMJ,ANP,ALP,AJP,AMJP)

C	COMPUTES <(SL)J,M|HP|(SL')J',M'>

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	EMAT=0.D0
	IF(AMJ.NE.AMJP) RETURN
	A1=AMJ-0.5D0
	A2=AMJ+0.5D0
	E1=U(AN,AL,A1,ANP,ALP,A1)
	E2=U(AN,AL,A2,ANP,ALP,A2)
	VC1L=VC(0.5D0,0.5D0,AL,A1,AJ,AMJ)
	VC1R=VC(0.5D0,0.5D0,ALP,A1,AJP,AMJ)
	VC2L=VC(0.5D0,-0.5D0,AL,A2,AJ,AMJ)
	VC2R=VC(0.5D0,-0.5D0,ALP,A2,AJP,AMJ)
	EMAT=VC1L*VC1R*E1+VC2L*VC2R*E2
 100	RETURN
	END


	DOUBLE PRECISION FUNCTION U(AN,AL,AM,ANP,ALP,AMP)

C       COMPUTES <AN,AL,AM|HP|ANP,ALP,AMP>
C       DIVIDE RADIAL REGIONS AND SELECT ROUTINES
C       INTEGRATES IN THREE REGIONS:
C         FROM THE ORIGIN TO THE INNER CONTACT WITH THE RG
C         THROUGH THE RG CONTACT 
C         FROM OUTER RG CONTACT TO INFINITY

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	RMIN=DABS(RG-R0)
	RMAX=RG+R0
	A1=0.5D0
	B1=RMIN
	U=U2(A1,B1,AN,AL,AM,ANP,ALP,AMP)
	A1=RMIN
	B1=RMAX
	U=U+U2(A1,B1,AN,AL,AM,ANP,ALP,AMP)
	A1=RMAX
	B1=100.D0
	U=U+U2(A1,B1,AN,AL,AM,ANP,ALP,AMP)
	RETURN
	END


	DOUBLE PRECISION FUNCTION VC(AJ1,AM1,AJ2,AM2,AJ3,AM3)

C	J. KIELKOPF -- JANUARY 31, 1980
C	COMPUTES THE VECTOR-COUPLING COEFFICIENT

        IMPLICIT REAL*8 (A-H,O-Z)

	VC=TJ(AJ1,AM1,AJ2,AM2,AJ3,-AM3)
	ISUM=-AJ1+AJ2-AM3
	IPH=(-1)**ISUM
	VC=VC*IPH*DSQRT(2.D0*AJ3+1.D0)
	RETURN
	END


	DOUBLE PRECISION FUNCTION TJ(AJ1,AM1,AJ2,AM2,AJ3,AM3)

C	Computes the three-j symbol with these arguments
C	  using the formula of Rotenberg, p.2 or Cowan, p. 142
C	Values of arguments are real, but internal arithmetic
C	  is integral where necessary

        IMPLICIT REAL*8 (A-H,O-Z)

C	Note the J and M are are twice the actual J and M

	TJ=0.D0
	J1=2.D0*AJ1
	M1=2.D0*AM1
	J2=2.D0*AJ2
	M2=2.D0*AM2
	J3=2.D0*AJ3
        M3=2.D0*AM3

C	Check to see that triangular conditions and M-sum are OK

	CALL CHCK(J1,M1,J2,M2,J3,M3,IVAL)
	IF(IVAL.NE.1) RETURN

C	Compute three-J

C	Compute phase

	IPH=J1-J2-M3
	IPH=IPH/2
	IPH=(-1)**IPH
	PHASE=IPH

C	Compute prefactor

	K=J1+J2-J3
	K=K/2
	PRE=FACT(K)
	K=J1-J2+J3
	K=K/2
	PRE=PRE*FACT(K)
	K=-J1+J2+J3
	K=K/2
	PRE=PRE*FACT(K)
	K=J1+M1
	K=K/2
	PRE=PRE*FACT(K)
	K=J1-M1
	K=K/2
	PRE=PRE*FACT(K)
	K=J2+M2
	K=K/2
	PRE=PRE*FACT(K)
	K=J2-M2
	K=K/2
	PRE=PRE*FACT(K)
	K=J3+M3
	K=K/2
	PRE=PRE*FACT(K)
	K=J3-M3
	K=K/2
	PRE=PRE*FACT(K)
	K=J1+J2+J3+2
	K=K/2
	A=FACT(K)
	B=PRE
	PRE=B/A
	PRE=DSQRT(PRE)
	TJ=PHASE*PRE

C	Compute sum over all I consistent with factorial
C	Determine range of sum

	CALL RANGE(J1,M1,J2,M2,J3,M3,IMIN,IMAX)
	SUM=0.D0
	DO I=IMIN,IMAX
	  II=I
	  DENOM=FACT(II)
	  K=J1+J2-J3-2*I
	  K=K/2
	  DENOM=DENOM*FACT(K)
	  K=J1-M1-2*I
	  K=K/2
	  DENOM=DENOM*FACT(K)
	  K=J2+M2-2*I
	  K=K/2
	  DENOM=DENOM*FACT(K)
	  K=J3-J2+M1+2*I
	  K=K/2
	  DENOM=DENOM*FACT(K)
	  K=J3-J1-M2+2*I
	  K=K/2
	  DENOM=DENOM*FACT(K)
	  ANUM=(-1)**I
	  SUM=SUM+ANUM/DENOM
	END DO

C	Complete calculation and return

	TJ=TJ*SUM
	RETURN
	END
        

	SUBROUTINE CHCK(J1,M1,J2,M2,J3,M3,IVAL)

C	Check validity of parameters 
C	Unsatisfied condition yields return with IVAL=0
C	J and M are 2 times the half-integral values

        IMPLICIT REAL*8 (A-H,O-Z)

	IVAL=0

C	Valid J Test

        IF(J1.LT.0) RETURN
	IF(J2.LT.0) RETURN    
	IF(J3.LT.0) RETURN
    
C	Valid M test

	IF(M1.LT.(-J1)) RETURN      
	IF(M2.LT.(-J2)) RETURN      
	IF(M3.LT.(-J3)) RETURN       
	IF(M1.GT.J1) RETURN    
	IF(M2.GT.J2) RETURN    
	IF(M3.GT.J3) RETURN         

C	M-sum test

	IF((M1+M2+M3).NE.0) RETURN         

C	Triangle conditions

	K1=J2+J3-J1
	K1=K1/2
	K2=J1+J3-J2
	K2=K2/2
	K3=J1+J2-J3
	K3=K3/2
	IF((K1.LT.0).OR.(K2.LT.0).OR.(K3.LT.0)) RETURN        

C	Integral J test
C	J1+J2+J3 must be even

	J=J1+J2+J3
	JP=J/2
	JP=JP*2
	IF(J.NE.JP) RETURN      

C	All conditions are satisfied

	IVAL=1
	RETURN
	END


	DOUBLE PRECISION FUNCTION FACT(K)

C	Calculate double precision real factorial of integer K

	IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION A(32)
	DATA KTOP,A(1)/1,1.D0/

C	KTOP is the argument of the last factorial calculated

	IF (K.EQ.0) THEN
	  FACT=1.D0
	ELSE IF (K.LE.KTOP) THEN
	  FACT=A(K)
	ELSE IF (K.LE.32) THEN
	  DO J=KTOP+1,K
	    RJ=J
	    A(J)=RJ*A(J-1)
	  END DO
	  KTOP=K
	  FACT=A(K)
	ELSE IF (K.GT.32) THEN
	  WRITE(5,5000) 
 5000	  FORMAT(' Argument of factorial too large in FACT.')
	  FACT=1.D0
	ENDIF
	RETURN
	END


	SUBROUTINE RANGE(J1,M1,J2,M2,J3,M3,IMIN,IMAX)

C	DETERMINES RANGE OF SUM IN THREE-J CALCULATION
C	JI'S AND MI'S ARE TWICE THE REAL VALUES

        IMPLICIT REAL*8 (A-H,O-Z)

	DIMENSION I(5)
	I(1)=J1+J2-J3
	I(2)=J1-M1
	I(3)=J2+M2
	I(4)=J3-J2+M1
	I(5)=J3-J1-M2
	DO 100 J=1,5
	I(J)=I(J)/2
 100	CONTINUE
	IMAX=MIN0(I(1),I(2),I(3))
	IMIN=-MIN0(I(4),I(5))
	IF(IMIN.LT.0) IMIN=0
	IF(IMAX.GE.IMIN) GO TO 1000
	ITMP=IMAX
	IMAX=IMIN
	IMIN=ITMP
 1000	CONTINUE
	RETURN
	END


	DOUBLE PRECISION FUNCTION U2(A1,B1,AN,AL,AM,ANP,ALP,AMP)

C	COMPUTES THE VALUE OF THE SUM OVER POSSIBLE LPP'S
C	OF THE MATRIX ELEMENTS
C	<AN,AL,AM|HP(LPP)|ANP,ALP,AMP>
C	WHERE A1 AND B1 DEFINE LIMITS OF RADIAL INTEGRATION

        IMPLICIT REAL*8 (A-H,O-Z)

	JMAX=AL+ALP+1.D0
	U2=0.D0
	DO 500 J=1,JMAX
	LPP=J-1
	ALPP=LPP
	VALUE=PLME(AL,AM,ALPP,ALP,AMP)
	IF(VALUE.EQ.(0.D0)) GO TO 500
	VALUE=VALUE*GAUSSL(A1,B1,AN,AL,ALPP,ANP,ALP)
	U2=U2+VALUE
 500	CONTINUE
	RETURN
	END


	DOUBLE PRECISION FUNCTION WF(AN,AL,AM,RE,THETA)

C       Computes complete angular and radial alkali atomic wavefunction
C       WF and RE in atomic units
C       For reference, not used in this routine in this form

        IMPLICIT REAL*8 (A-H,O-Z)

	RADVAL=F(AN,AL,RE)
	ANGVAL=Y(AL,AM,THETA)
	WF=RADVAL*ANGVAL
	RETURN
	END


	DOUBLE PRECISION FUNCTION F(AN,AL,RE)

C       Bates-Damgaard radial wavefunctions in atomic units

        IMPLICIT REAL*8 (A-H,O-Z)

	RHO=2.D0*RE/AN
	A=1.D0
	SUM=0.D0
	ITMAX=AN-0.5D0
	IF (ITMAX.EQ.0) GO TO 110
	DO 100 I=1,ITMAX
	AI=I
	A=A*(AL*(AL+1.D0)-(AN-AI)*(AN-AI+1.D0))
	A=A/AI
	S=A/RHO**I
	SUM=SUM+S
 100	CONTINUE
 110	SUM=SUM+1.D0
	F=RHO**AN*DEXP(-RHO/2.D0)*SUM
	ANORM=AN**2*GAMMA(AN+AL+1.D0)*GAMMA(AN-AL)
	ANORM=1.D0/DSQRT(ANORM)
	F=ANORM*F
 120	CONTINUE
	F=F/RE
	RETURN
	END


	DOUBLE PRECISION FUNCTION PLME(ALP,AMLP,ALPP,AL,AML)

C	COMPUTES THE MATRIX ELEMENT  <L'ML'|P(L")|LML>
C	REQUIRES THE THREE-J SUBROUTINE

        IMPLICIT REAL*8 (A-H,O-Z)

	PLME=0.D0
	IF(AMLP.NE.AML) GO TO 1000
	M=AML
	IPH=(-1)**M
	PLME=IPH
	PLME=DSQRT(2.D0*ALP+1.D0)*DSQRT(2.D0*AL+1.D0)*PLME
	AL1=ALP
	AL2=ALPP
	AL3=AL
	AM1=-AML
	AM2=0.D0
	AM3=AML
	PLME=PLME*TJ(AL1,AM1,AL2,AM2,AL3,AM3)
	AM1=0.D0
	AM2=0.D0
	AM3=0.D0
	PLME=PLME*TJ(AL1,AM1,AL2,AM2,AL3,AM3)
 1000	CONTINUE
	RETURN
	END


	DOUBLE PRECISION FUNCTION GAUSSL(A1,B1,AN,AL,ALPP,ANP,ALP)

C	Computes RE-integral

        IMPLICIT REAL*8 (A-H,O-Z)
	DIMENSION X(24),Y(24),F(24),W(24)

	X(1)=.064056892862605D0
	X(2)=.191118867473616D0
	X(3)=.315042679696163D0
	X(4)=.433793507626045D0
	X(5)=.545421471688839D0
	X(6)=.648093651936975D0
	X(7)=.740124191578554D0
	X(8)=.820001985973902D0
	X(9)=.886415527004401D0
	X(10)=.938274552002732D0
	X(11)=.974728555971309D0
	X(12)=.995187219997021D0
	W(1)=.127938195346752D0
	W(2)=.125837456346828D0
	W(3)=.121670472927803D0
	W(4)=.115505668053725D0
	W(5)=.107444270115965D0
	W(6)=.097618652104113D0
	W(7)=.086190161531953D0
	W(8)=.073346481411080D0
	W(9)=.059298584915436D0
	W(10)=.044277438817419D0
	W(11)=.028531388628933D0
	W(12)=.012341229799987D0
	DO 110 J=1,12
	K=J+12
	X(K)=-X(J)
	W(K)=W(J)
 110	CONTINUE
	SUM=0.D0
	DO 120 J=1,24
	Y(J)=0.5D0*(B1-A1)*X(J)+0.5D0*(B1+A1)
	RE=Y(J)
	F(J)=HL(AN,AL,ALPP,ANP,ALP,RE)
	SUM=SUM+W(J)*F(J)
 120	CONTINUE
	SUM=SUM*0.5D0*(B1-A1)
	GAUSSL=SUM
	RETURN
	END


	DOUBLE PRECISION FUNCTION HL(AN,AL,ALPP,ANP,ALP,RE)

        IMPLICIT REAL*8 (A-H,O-Z)

	PSI=F(AN,AL,RE)
	PSIP=F(ANP,ALP,RE)
	OPER=HPL(ALPP,RE)
        
C	ALL OTHER VARIABLES REQUIRED FOR HPL ARE IN COMMON
	
        HL=PSI*OPER*PSIP*RE*RE
 100    CONTINUE
	RETURN
	END


	DOUBLE PRECISION FUNCTION GAMMA(Y)

C	COMPUTES GAMMA FUNCTION
C	BASED ON ABRAMOWITZ AND STEGUN P. 257

        IMPLICIT REAL*8 (A-H,O-Z)
        DIMENSION B(8)

	X=Y
	B(1)=-.577191652D0
	B(2)=.988205891D0
	B(3)=-.897056937D0
	B(4)=.918206857D0
	B(5)=-.756704078D0
	B(6)=.482199394D0
	B(7)=-.193527818D0
	B(8)=.035868343D0
C	DETERMINE RANGE OF ARGUMENT AND MULTIPLIER
	GAM=0.D0
	GAMMA=0.D0
	IF(X.GT.(0.D0)) GO TO 50
	WRITE(5,1000)
 1000	FORMAT(' ATTEMPT TO COMPUTE GAMMA OF NEG. OR ZERO ARG.')
	RETURN
 50	CONTINUE
	IF(((0.D0).LE.X).AND.(X.LT.(1.D0))) GO TO 100
	IF(((1.D0).LE.X).AND.(X.LT.(2.D0))) GO TO 200
	GO TO 300
 100	CONTINUE
	A=1.D0/X
	Z=X
	GO TO 500
 200	A=1.D0
	Z=X-1.D0
	GO TO 500
 300	A=1.D0
	Z=X
 310	Z=Z-1.D0
	A=A*Z
	IF(Z.GT.(2.D0)) GO TO 310
	Z=Z-1.D0
 500	GAM=1.D0
	DO 750 I=1,8
	GAM=GAM+B(I)*Z**I
 750	CONTINUE
	GAM=GAM*A
	GAMMA=GAM
	RETURN
	END


	DOUBLE PRECISION FUNCTION Y(AL,AM,THETA)

C	COMPUTES THE SPHERICAL HARMONIC YLM FOR L<=3
C	SUPRESSES DEPENDENCE ON PHI (EXP(PHI)=1.)
C	TESTS THAT AL AND ML ARE INTEGRAL
C	TESTS THAT THETA IS WITHIN RANGE

        IMPLICIT REAL*8 (A-H,O-Z)

	Y=0.D0
	L=AL
	AP=L
	IF(AP.NE.AL) GO TO 1000
	M=AM
	AP=M
	IF(AP.NE.AM) GO TO 1000
	PI=3.14159265359D0
	IF((THETA.LT.(0.D0)).OR.(THETA.GT.PI)) GO TO 1000
	IF((L.GT.3).OR.(L.LT.0)) GO TO 1000
	IF((M.LT.-L).OR.(M.GT.L)) GO TO 1000
C	COMPUTE Y FOR L LESS THAN 4
	SGNM=1.D0
	IF(M.NE.0) SGNM=AM/DABS(AM)
	MABS=DABS(AM)
	J=L+1
	GO TO (100,200,300,400) J
 100	CONTINUE
C	COMPUTE Y FOR L=0
	Y=2.D0*DSQRT(PI)
	Y=1.D0/Y
	RETURN
 200	CONTINUE
C	COMPUTE Y FOR L=1
	IF(M.NE.0) GO TO 210
	Y=0.5D0*DSQRT(3.D0/PI)*DCOS(THETA)
	RETURN
 210	CONTINUE
	Y=-SGNM*0.5D0*DSQRT(3.D0/(2.D0*PI))*DSIN(THETA)
	RETURN
 300	CONTINUE
C	COMPUTE Y FOR L=2
	IF(M.NE.0) GO TO 310
	Y=0.25D0*DSQRT(5.D0/PI)
	Y=Y*(2.D0*DCOS(THETA)*DCOS(THETA)-DSIN(THETA)*DSIN(THETA))
	RETURN
 310	CONTINUE
	IF(MABS.NE.1) GO TO 320
	Y=-SGNM*0.5D0*DSQRT(15.D0/(2.D0*PI))*DCOS(THETA)*DSIN(THETA)
	RETURN
 320	CONTINUE
	Y=0.25D0*DSQRT(15.D0/(2.D0*PI))*(DSIN(THETA))**2.D0
	RETURN
 400	CONTINUE
C	COMPUTE Y FOR L=3
	IF(MABS.NE.0) GO TO 410
	Y=2.D0*(DCOS(THETA))**3.D0-3.D0*DCOS(THETA)*(DSIN(THETA))**2.D0
	Y=Y*0.25D0*DSQRT(7.D0/PI)
	RETURN
 410	CONTINUE
	IF(MABS.NE.1) GO TO 420
	Y=(5.D0*(DCOS(THETA))**2.D0-1.D0)*DSIN(THETA)
	Y=-0.125D0*SGNM*DSQRT(21.D0/PI)*Y
	RETURN
 420	CONTINUE
	IF(MABS.NE.2) GO TO 430
	Y=DCOS(THETA)*DSIN(THETA)*DSIN(THETA)
	Y=Y*0.25D0*DSQRT(52.5D0/PI)
	RETURN
 430	CONTINUE
	Y=DSIN(THETA)
	Y=Y**3.D0
	Y=-Y*SGNM*0.125D0*DSQRT(35.D0/PI)
	RETURN
 1000	CONTINUE
	RETURN
	END
        

	DOUBLE PRECISION FUNCTION HPL(AL,RE)

C	Compute total of interactions using RMP 1982  Eq. (192)
C       Add Gombas contact term based on perturber electron density
C       Called within HL(AN,AL,ALPP,ANP,ALP,RE) 

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	CHI=(RG*RG+RE*RE)/(2.D0*RG*RE)

C       Calculate induced dipole potential 
C         when electron is outside cutoff R0 around the RG
C       Based on expansion of step function in spherical harmonics

	RG2=RG*RG
        RG3=RG2*RG
        RG4=RG3*RG
        HPL=SMLF(0.D0,AL,CHI,RE)
	HPL=HPL-2.D0*RG3*SMLF(-1.5D0,AL,CHI,RE)
	HPL=HPL+RG4*SMLF(-2.D0,AL,CHI,RE)
	ALM1=AL-1.D0
	ALP1=AL+1.D0
	TERM=0.D0
	IF(AL.EQ.(0.D0)) GO TO 75
	TERM=AL*SMLF(-1.5D0,ALM1,CHI,RE)/(2.D0*AL-1.D0)
 75	CONTINUE
	TERM=TERM+ALP1*SMLF(-1.5D0,ALP1,CHI,RE)/(2.D0*AL+3.D0)
	TERM=TERM*2.D0*RE*RG2
	HPL=HPL+TERM
	HPL=-0.5D0*ALPHA*HPL/RG4

C	Add Gombas contact term for collisions inside R0
C       R0 and GL are in atomic units
C       This form uses a perturber core electron density parameter
	
        IF(AL.EQ.(0.D0)) THEN
	TERM=1.D0-SMLF(0.D0,AL,CHI,RE)
        ELSE
        TERM=-SMLF(0.D0,AL,CHI,RE)
        END IF        
        GL=1.8415843D0*ANS23*TERM/R0**2
        HPL=HPL+GL

	RETURN
	END
        

	DOUBLE PRECISION FUNCTION HPLF(AL,RE)

C	Compute total of interactions using RMP 1982  Eq. (192)
C       Add Fermi contact term based on scattering length SL
C       Optional version of HPL function

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	CHI=(RG*RG+RE*RE)/(2.D0*RG*RE)

C       Calculate induced dipole potential 
C         when electron is outside cutoff R0 around the RG
C       Based on expansion of step function in spherical harmonics

	RG2=RG*RG
        RG3=RG2*RG
        RG4=RG3*RG
        HPLF=SMLF(0.D0,AL,CHI,RE)
	HPLF=HPLF-2.D0*RG3*SMLF(-1.5D0,AL,CHI,RE)
	HPLF=HPLF+RG4*SMLF(-2.D0,AL,CHI,RE)
	ALM1=AL-1.D0
	ALP1=AL+1.D0
	TERM=0.D0
	IF(AL.EQ.(0.D0)) GO TO 75
	TERM=AL*SMLF(-1.5D0,ALM1,CHI,RE)/(2.D0*AL-1.D0)
 75	CONTINUE
	TERM=TERM+ALP1*SMLF(-1.5D0,ALP1,CHI,RE)/(2.D0*AL+3.D0)
	TERM=TERM*2.D0*RE*RG2
	HPLF=HPLF+TERM
	HPLF=-0.5D0*ALPHA*HPLF/RG4

C	Add Fermi contact term inside cutoff here 
C       R0 and SL are in atomic units at this point
C       This form uses a scattering length parameter
	
        IF(AL.EQ.(0.D0)) THEN
	TERM=1.D0-SMLF(0.D0,AL,CHI,RE)
        ELSE
        TERM=-SMLF(0.D0,AL,CHI,RE)
        END IF        
        GL=1.5D0*SL*TERM/R0**3
        HPLF=HPLF+GL

	RETURN
	END


	DOUBLE PRECISION FUNCTION HPLB(AL,RE)

C       Compute total of interactions using Baylis 1969 Eq. A10
C       Optional version of HPL

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

C       Explicitly define the scattering length unless it is in common

	SL=1.D0

C       Set CHI for this RE and RG

        CHI=(RG*RG+RE*RE)/(2.D0*RG*RE)

C       Calculate induced dipole potential 
C         when electron is outside cutoff R0 around the RG
C       Based on expansion of step function in spherical harmonics

	HPLB=0.D0
	IF(AL.NE.(0.D0)) GO TO 50
	HPLB=1.D0/RG**4+1.D0/R0**4
 50	CONTINUE
	HPLB=HPLB-SMLF(0.D0,AL,CHI,RE)/R0**4
	HPLB=HPLB-2.D0*SMLF(-1.5D0,AL,CHI,RE)/RG
	HPLB=HPLB+SMLF(-2.D0,AL,CHI,RE)
	ALM1=AL-1.D0
	ALP1=AL+1.D0
	TERM=0.D0
	IF(AL.EQ.(0.D0)) GO TO 75
	TERM=AL*SMLF(-1.5D0,ALM1,CHI,RE)/(2.D0*AL-1.D0)
 75	CONTINUE
	TERM=TERM+ALP1*SMLF(-1.5D0,ALP1,CHI,RE)/(2.D0*AL+3.D0)
	TERM=TERM*2.D0*RE/RG**2
	HPLB=HPLB+TERM
	HPLB=-0.5D0*ALPHA*HPLB
        
C	Add Fermi contact term inside cutoff here 
C       R0 and SL are in atomic units at this point
	
        IF(AL.EQ.(0.D0)) THEN
	TERM=1.D0-SMLF(0.D0,AL,CHI,RE)
        ELSE
        TERM=-SMLF(0.D0,AL,CHI,RE)
        END IF        
        GL=1.5D0*SL*TERM/R0**3
        HPLB=HPLB+GL        

	RETURN
	END


	DOUBLE PRECISION FUNCTION SMLF(Q,AL,CHI,RE)

C	COMPUTES THE VALUE OF BAYLIS EQ. (A6)

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	RLIM=DABS(RG-RE)
	RMAX=RG+RE
	CHI2=CHI-R0*R0/(2.D0*RE*RG)
	IF(R0.LE.RLIM) XI0=1.D0
	IF((RLIM.LT.R0).AND.(R0.LT.RMAX)) XI0=CHI2
	IF(RMAX.LE.R0) XI0=-1.D0
	L=AL
	IF(L.NE.0) GO TO 100
	SMLF=SMLFQ0(Q,CHI,RE,XI0)
	RETURN
 100	IF(L.NE.1) GO TO 200
	SMLF=SMLFQ1(Q,CHI,RE,XI0)
	RETURN
 200	CONTINUE

C	IF(L.GE.2) APPLY RECURSION RELATIONS

	F0=SMLFQ0(Q,CHI,RE,XI0)
	F1=SMLFQ1(Q,CHI,RE,XI0)
	K=1
	CKM1=F0
	CK=F1
 250	CONTINUE
	AK=K
	AKP1=AK+1.D0
	AKM1=AK-1.D0
	CKP1=PL(AKP1,XI0)-PL(AKM1,XI0)
	CKP1=CKP1*R0**(2.D0*Q+2.D0)
	CKP1=CKP1/(4.D0*RG*RE)
	CKP1=CKP1+(AK-Q-1.D0)*CKM1/(2.D0*AK-1.D0)
	CKP1=CHI*CK-CKP1
	CKP1=CKP1*(2.D0*AK+3.D0)/(AK+Q+2.D0)
	KP1=K+1
	IF(KP1.EQ.L) GO TO 300
	K=K+1
	CKM1=CK
	CK=CKP1
	GO TO 250
 300	CONTINUE
	SMLF=CKP1
	RETURN
	END


	DOUBLE PRECISION FUNCTION SMLFQ0(Q,CHI,RE,XI0)

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	IF(Q.NE.(-1.D0)) GO TO 100
	ARG=(CHI+1.D0)/(CHI-XI0)
	ARG=DABS(ARG)
	SMLFQ0=DLOG(ARG)
	SMLFQ0=SMLFQ0/(4.D0*RE*RG)
	RETURN
 100	CONTINUE
	SMLFQ0=(CHI+1.D0)**(Q+1.D0)-(CHI-XI0)**(Q+1.D0)
	SMLFQ0=SMLFQ0*(2.D0*RE*RG)**Q
	SMLFQ0=SMLFQ0/(2.D0*(Q+1.D0))
	RETURN
	END


	FUNCTION SMLFQ1(Q,CHI,RE,XI0)

        IMPLICIT REAL*8 (A-H,O-Z)
	COMMON ALPHA,RG,R0,ANS23

	IF(Q.NE.(-2.D0)) GO TO 100
	TERM=SMLFQ0(Q,CHI,RE,XI0)
	SMLFQ1=3.D0*CHI*TERM
	ARG=DABS((CHI+1.D0)/(CHI-XI0))
	TERM=1.5D0*DLOG(ARG)/(2.D0*RE*RG)**2
	SMLFQ1=SMLFQ1-TERM
	RETURN

 100	CONTINUE
	TERM=SMLFQ0(Q,CHI,RE,XI0)
	SMLFQ1=3.D0*CHI*TERM
	TERM=(CHI+1.D0)**(Q+2.D0)-(CHI-XI0)**(Q+2.D0)
	TERM=3.D0*TERM*(2.D0*RE*RG)**Q/(2.D0*(Q+2.D0))
	SMLFQ1=SMLFQ1-TERM
	RETURN
	END


	FUNCTION PL(AL,XI)

C	COMPUTES THE VALUE OF THE AL LEGENDRE POLYNOMIAL

        IMPLICIT REAL*8 (A-H,O-Z)

	P0=1.D0
	P1=XI
	L=AL
	PL=0.D0
	IF(L.LT.0) RETURN
	IF(L.NE.0) GO TO 100
	PL=P0
	RETURN
 100	IF(L.NE.1) GO TO 200
	PL=P1
	RETURN
 200	CONTINUE

C	IF(L.GE.2) APPLY RECURSION RELATIONS

	K=1
	CKM1=P0
	CK=P1
 250	CONTINUE
	AK=K
	CKP1=(2.D0*AK+1.D0)*XI*CK-AK*CKM1
	CKP1=CKP1/(AK+1.D0)
	KP1=K+1
	IF(KP1.EQ.L) GO TO 300
	K=K+1
	CKM1=CK
	CK=CKP1
	GO TO 250
 300	CONTINUE
	PL=CKP1
	RETURN
	END
